package templates

import "share.dev/routes"

templ IndexPage(csrfToken string) {
  @Base("Share.dev - Connect and Share") {
    <style>
        .tab-content {
            display: none;
        }

        .tab-content.is-active {
            display: block;
        }

        .hero {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
    </style>

    <!-- Hero -->
    <section class="hero is-primary is-fullheight">
        <div class="hero-head">
            <nav class="navbar is-transparent">
                <div class="container">
                    <div class="navbar-brand">
                        <a class="navbar-item">
                            <i class="fas fa-code-branch mr-2"></i>
                            <strong>Share.dev</strong>
                        </a>
                    </div>
                </div>
            </nav>
        </div>

        <div class="hero-body">
            <div class="container">
                <div class="columns is-vcentered">
                    <!-- Left side - Content -->
                    <div class="column is-6">
                        <h1 class="title is-1">Connect with the world</h1>
                        <h2 class="subtitle is-4">Share your thoughts and discover new perspectives</h2>
                    </div>

                    <!-- Right side - Auth Form -->
                    <div class="column is-6">
                        <div class="box">
                            <div class="tabs is-centered is-boxed">
                                <ul>
                                    <li class="is-active" data-target="login">
                                        <a><span>Log In</span></a>
                                    </li>
                                    <li data-target="signup">
                                        <a><span>Sign Up</span></a>
                                    </li>
                                </ul>
                            </div>

                            <!-- Log In -->
                            <div id="login" class="tab-content is-active">
                                <form hx-post={ routes.Login } hx-target="#result">
                                    <input type="hidden" name="csrf_token" value={csrfToken}>
                                    <div class="field">
                                        <input class="input" type="text" name="login" placeholder="Email or Username" required>
                                    </div>
                                    <div class="field">
                                        <input class="input" type="password" name="password" placeholder="Password" required>
                                    </div>
                                    <div class="field">
                                        <button class="button is-link is-fullwidth" type="submit">Log In</button>
                                    </div>
                                </form>
                            </div>

                            <!-- Sign Up -->
                            <div id="signup" class="tab-content">
                                <form hx-post={ routes.Signup } hx-target="#result">
                                    <input type="hidden" name="csrf_token" value={csrfToken}>
                                    <div class="field">
                                        <input class="input" type="email" name="email" placeholder="Email" required>
                                    </div>
                                    <div class="field">
                                        <input class="input" type="password" name="password" placeholder="Password"
                                               minlength="8" required>
                                        <p class="help is-size-7">
                                            Password must be at least 8 characters with uppercase, lowercase, number, and special character
                                        </p>
                                    </div>
                                    <div class="field">
                                        <input class="input" type="password" name="confirm_password"
                                               placeholder="Confirm Password" minlength="8" required>
                                    </div>
                                    <div class="field">
                                        <button class="button is-primary is-fullwidth" type="submit">Create Account</button>
                                    </div>
                                </form>
                            </div>

                            <div id="result"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <script>
        // Tab switching
        document.querySelectorAll('.tabs li').forEach(tab => {
            tab.addEventListener('click', function () {
                const target = this.dataset.target;

                document.querySelectorAll('.tabs li').forEach(t => t.classList.remove('is-active'));
                document.querySelectorAll('.tab-content').forEach(tc => tc.classList.remove('is-active'));

                this.classList.add('is-active');
                document.getElementById(target).classList.add('is-active');
            });
        });

        // Password confirmation validation
        document.addEventListener('DOMContentLoaded', function() {
            const signupForm = document.querySelector('#signup form');
            const password = signupForm.querySelector('input[name="password"]');
            const confirmPassword = signupForm.querySelector('input[name="confirm_password"]');

            function validatePasswordMatch() {
                if (password.value && confirmPassword.value) {
                    if (password.value !== confirmPassword.value) {
                        confirmPassword.setCustomValidity('Passwords do not match');
                        confirmPassword.classList.add('is-danger');
                    } else {
                        confirmPassword.setCustomValidity('');
                        confirmPassword.classList.remove('is-danger');
                    }
                }
            }

            password.addEventListener('input', validatePasswordMatch);
            confirmPassword.addEventListener('input', validatePasswordMatch);
        });

        // Loading states
        document.body.addEventListener('htmx:beforeRequest', function (evt) {
            evt.detail.elt.querySelector('button').classList.add('is-loading');
        });

        document.body.addEventListener('htmx:afterRequest', function (evt) {
            evt.detail.elt.querySelector('button').classList.remove('is-loading');
        });
    </script>
  }
}
