package templates

templ IndexPage(csrfToken string) {
  @Base("Share.dev - Connect and Share") {
  <!-- Hero Section -->
    <section class="hero is-fullheight is-link">
      <div class="hero-body">
        <div class="container has-text-centered">
          <h1 class="title is-size-1">Welcome to Share.dev, this is some text, for testing üåê</h1>
          <h2 class="subtitle is-size-4">Connect. Share. Discover.</h2>
          <div class="buttons is-centered mt-5">
            <button class="button is-light is-medium" data-toggle="login-modal">Log In</button>
            <button class="button is-primary is-medium" data-toggle="signup-modal">Sign Up</button>
          </div>
        </div>
      </div>
    </section>

    <!-- Login Modal -->
    <div class="modal" id="login-modal">
      <div class="modal-background"></div>
      <div class="modal-card">
        <header class="modal-card-head">
          <p class="modal-card-title">Log In</p>
          <button class="delete" aria-label="close" data-toggle="login-modal"></button>
        </header>
        <section class="modal-card-body">
          <form hx-post="/login"
                hx-trigger="submit delay:500ms"
                hx-target="#login-error-message"
                hx-swap="innerHTML">
            <input type="hidden" name="csrf_token" value={csrfToken}>
            <div id="login-error-message" class="error-message has-text-danger mb-3"></div>
            <div class="field">
              <label class="label">Email</label>
              <div class="control">
                <input class="input" type="email" name="email" required autocomplete="username" />
              </div>
            </div>
            <div class="field">
              <label class="label">Password</label>
              <div class="control">
                <input class="input" type="password" name="password" required autocomplete="current-password" />
              </div>
            </div>
            <div class="has-text-right">
              <button type="submit" class="button is-link">Log In</button>
            </div>
          </form>
        </section>
      </div>
    </div>

    <!-- Signup Modal -->
    <div class="modal" id="signup-modal">
      <div class="modal-background"></div>
      <div class="modal-card">
        <header class="modal-card-head">
          <p class="modal-card-title">Sign Up</p>
          <button class="delete" aria-label="close" data-toggle="signup-modal"></button>
        </header>
        <section class="modal-card-body">
          <form id="signup-form"
                hx-post="/signup"
                hx-trigger="submit delay:500ms"
                hx-target="#signup-error-message"
                hx-swap="innerHTML">
            <input type="hidden" name="csrf_token" value={csrfToken}>
            <div id="signup-error-message" class="error-message has-text-danger mb-3"></div>
            <div class="field">
              <label class="label">Name</label>
              <div class="control">
                <input class="input" type="text" name="name" required />
              </div>
            </div>
            <div class="field">
              <label class="label">Email</label>
              <div class="control">
                <input class="input" type="email" name="email" required autocomplete="username" />
              </div>
            </div>
            <div class="field">
              <label class="label">Password</label>
              <div class="control">
                <input class="input" type="password" name="password" required autocomplete="new-password" />
              </div>
            </div>
            <div class="field">
              <label class="label">Confirm Password</label>
              <div class="control">
                <input class="input" type="password" name="confirm_password" required autocomplete="new-password" />
              </div>
            </div>
            <div class="has-text-right">
              <button type="submit" class="button is-primary">Sign Up</button>
            </div>
          </form>
        </section>
      </div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        // Modal toggle logic
        document.querySelectorAll("[data-toggle]").forEach(btn => {
          btn.addEventListener("click", () => {
            let target = document.getElementById(btn.dataset.toggle);
            target.classList.toggle("is-active");
            // clear error messages & reset forms when modals open
            const errorMessages = target.querySelectorAll(".error-message");
            errorMessages.forEach(em => em.textContent = "");
            const forms = target.querySelectorAll("form");
            forms.forEach(f => f.reset());
          });
        });

        // Confirm password validation before signup submit
        const signupForm = document.getElementById("signup-form");
        if (signupForm) {
          signupForm.addEventListener("submit", (e) => {
            const pw = signupForm.querySelector('input[name="password"]');
            const pw2 = signupForm.querySelector('input[name="confirm_password"]');
            const errorBox = signupForm.querySelector(".error-message");
            if (pw.value !== pw2.value) {
              e.preventDefault();
              errorBox.textContent = "Passwords do not match.";
              pw.classList.add("is-danger");
              pw2.classList.add("is-danger");
              return false;
            }
            // Clear errors on success
            pw.classList.remove("is-danger");
            pw2.classList.remove("is-danger");
            errorBox.textContent = "";
          });
        }

        // Clear error highlight on input change
        document.querySelectorAll('input[type="password"], input[type="email"], input[type="text"]').forEach(input => {
          input.addEventListener("input", () => {
            input.classList.remove("is-danger");
            const errorBox = input.closest("form").querySelector(".error-message");
            if (errorBox) errorBox.textContent = "";
          });
        });
      });
    </script>
  }
}
